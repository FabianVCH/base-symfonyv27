<?php

/**
 *
 *  Jose Segura
 *
 */

namespace Application\Sonata\UserBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Sonata\UserBundle\Entity\BaseUser as BaseUser;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Validator\Constraints as Assert;
use Gedmo\Mapping\Annotation as Gedmo;

//use Gedmo\Mapping\Annotation as Gedmo;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author Leonardo Monge :') and Jose Segura
 
 * User
 *
 * @ORM\Table(name="fos_user_user")
 * @ORM\Entity
 * @ORM\Entity(repositoryClass="UserRepository")
 * @ORM\HasLifecycleCallbacks
 * @UniqueEntity(fields="email", groups={"registration"}, message="El email ya esta en uso.")
 */
define('PROFILE_IMAGE_PATH', 'profile');
class User extends BaseUser
{
    /**
     * @var integer $id
     * 
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;    

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->image  = 'default.jpg';
        parent::__construct();
    }
    
    // <editor-fold defaultstate="collapsed" desc="Upload Imagen de Perfil">
    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    public $image;

    /**
     * @Assert\File(maxSize="6000000")
     */
    private $file;

    /**                                                 
     * @ORM\ManyToMany(targetEntity="Application\Sonata\UserBundle\Entity\Group")            
     * @ORM\JoinTable(name="fos_user_user_group")       
     */                                                 
    protected  $groups;  

    /**                                                 
     * @ORM\OneToMany(targetEntity="Lumen\FosAuthBundle\Entity\AccessToken", mappedBy="User")            
     */                                                 
    protected $accessToken;

    /**                                                 
     * @ORM\OneToMany(targetEntity="Lumen\FosAuthBundle\Entity\AuthCode", mappedBy="User")            
     */                                                 
    protected $authCode;

    /**                                                 
     * @ORM\OneToMany(targetEntity="Lumen\FosAuthBundle\Entity\RefreshToken", mappedBy="User")            
     */                                                 
    protected $refreshToken;

    /**
     * ORM\Column(type="string", length=255, nullable=true)
     */
    public $path;
    
    private $tempPath;

    public function getAbsolutePath()
    {
        return null === $this->image ? null : $this->getUploadRootDir() . '/' . $this->image;
    }

    public function getWebPath()
    {
        return null === $this->image ? null : 'content/'.$this->getUploadDir() . '/' . $this->image;
    }

    public function getUploadRootDir()
    {
        // the absolute directory imagen where uploaded
        // documents should be saved
        return __DIR__ . '/../../../../../web/content/' . $this->getUploadDir();
    }

    public function getUploadDir()
    {
        // get rid of the __DIR__ so it doesn't screw up
        // when displaying uploaded doc/image in the view.
        return 'uploads/' . PROFILE_IMAGE_PATH;
    }

    public function setFile(UploadedFile $file = null)
    {
        $this->file = $file;
        // check if we have an old image imagen
        if (isset($this->image))
        {
            // store the old name to delete after the update
            $this->tempPath = $this->image;
            $this->image = null;
        } else
        {
            $this->image = 'initial';
        }
    }

    /**
     * Get file.
     *
     * @return UploadedFile
     */
    public function getFile()
    {
        return $this->file;
    }

    /**
     * @ORM\PrePersist()
     * @ORM\PreUpdate()
     */
    final public function preUploadEntityImage()
    {
        if (null !== $this->getFile())
        {
            // do whatever you want to generate a unique name
            $filename = sha1(uniqid(mt_rand(), true));
            $this->image = $filename . '.' . $this->getFile()->guessExtension();
        }
    }

    /**
     * @ORM\PostPersist()
     * @ORM\PostUpdate()
     */
    final public function uploadEntityImage()
    {
        if (null === $this->getFile())
        {
            return;
        }

        // if there is an error when moving the file, an exception will
        // be automatically thrown by move(). This will properly prevent
        // the entity from being persisted to the database on error
        $this->getFile()->move($this->getUploadRootDir(), $this->image);

        // check if we have an old image
        if (isset($this->tempPath) && $this->tempPath !== 'default.jpg')
        {
            // delete the old image
            @unlink($this->getUploadRootDir() . '/' . $this->tempPath);
            // clear the temp image imagen
            $this->tempPath = null;
        }

        $this->file = null;
    }

    /**
     * @ORM\PostRemove()
     */
    final public function removeUploadEntityImage()
    {
        if ($file = $this->getAbsolutePath())
        {
            if ($this->image)
            {
                if($file != ($this->getUploadRootDir() . '/default.jpg' ) ){
                    unlink($file);
                }
            }
        }
    }

    public $fotoUrl;

    public function getFotoUrl()
    {
        return $this->fotoUrl;
    }

    public function getPictureName()
    {
        return $this->image;
    }
    
    /**
     * Set image
     *
     * @param string $image
     * @return User
     */
    public function setImage($image)
    {
        $this->image = $image;
    
        return $this;
    }

    /**
     * Get image
     *
     * @return string 
     */
    public function getImage()
    {        
        return $this->image;
    }
    
    public function humanCountry()
    {
        $c = \Symfony\Component\Locale\Locale::getDisplayCountries('en');

        return array_key_exists($this->getCountry(), $c) ? $c[$this->getCountry()] : $this->getCountry();
    }
    
    
    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }


    /**
     * Add accessToken
     *
     * @param \Application\Sonata\UserBundle\Entity\AccessToken $accessToken
     * @return User
     */
    public function addAccessToken(\Application\Sonata\UserBundle\Entity\AccessToken $accessToken)
    {
        $this->accessToken[] = $accessToken;

        return $this;
    }

    /**
     * Remove accessToken
     *
     * @param \Application\Sonata\UserBundle\Entity\AccessToken $accessToken
     */
    public function removeAccessToken(\Application\Sonata\UserBundle\Entity\AccessToken $accessToken)
    {
        $this->accessToken->removeElement($accessToken);
    }

    /**
     * Get accessToken
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getAccessToken()
    {
        return $this->accessToken;
    }

    /**
     * Add authCode
     *
     * @param \Application\Sonata\UserBundle\Entity\AuthCode $authCode
     * @return User
     */
    public function addAuthCode(\Application\Sonata\UserBundle\Entity\AuthCode $authCode)
    {
        $this->authCode[] = $authCode;

        return $this;
    }

    /**
     * Remove authCode
     *
     * @param \Application\Sonata\UserBundle\Entity\AuthCode $authCode
     */
    public function removeAuthCode(\Application\Sonata\UserBundle\Entity\AuthCode $authCode)
    {
        $this->authCode->removeElement($authCode);
    }

    /**
     * Get authCode
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getAuthCode()
    {
        return $this->authCode;
    }

    /**
     * Add refreshToken
     *
     * @param \Application\Sonata\UserBundle\Entity\RefreshToken $refreshToken
     * @return User
     */
    public function addRefreshToken(\Application\Sonata\UserBundle\Entity\RefreshToken $refreshToken)
    {
        $this->refreshToken[] = $refreshToken;

        return $this;
    }

    /**
     * Remove refreshToken
     *
     * @param \Application\Sonata\UserBundle\Entity\RefreshToken $refreshToken
     */
    public function removeRefreshToken(\Application\Sonata\UserBundle\Entity\RefreshToken $refreshToken)
    {
        $this->refreshToken->removeElement($refreshToken);
    }

    /**
     * Get refreshToken
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getRefreshToken()
    {
        return $this->refreshToken;
    }
}
